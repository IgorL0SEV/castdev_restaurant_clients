# main.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–∞—Å—Ç–¥–µ–≤-–æ–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.

import logging
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import os

from bot.config import BOT_TOKEN
from bot.google_sheets import save_user_to_gsheets
from bot.questions import questions

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# --- –°–õ–£–ñ–ï–ë–ù–´–ï –ö–õ–Æ–ß–ò –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ü–æ—Ä—è–¥–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è Google Sheets (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å column_mapping.py)
BASIC_KEYS = [
    "gender", "age", "first_time", "visit_source", "visit_frequency", "last_visit_satisfaction",
    "last_visit_issues", "cuisine_preference", "menu_satisfaction", "avg_bill",
    "reservation_preference", "important_factors", "delivery_interest", "loyalty_program",
    "recommendation_willingness", "improvement_needed"
]
# –ö–ª—é—á–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö —É—Å–ª–æ–≤–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
SPECIAL_QUESTIONS = {
    "last_visit_issues": {
        "value": "üü¢ –î–∞",
        "ask_key": "issues_description"
    },
    "menu_satisfaction": {
        "value": "üç≤ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –±–ª—é–¥",
        "ask_key": "menu_wishes"
    },
    "improvement_needed": {
        "value": "üëç –î–∞",
        "ask_key": "improvement_suggestions"
    }
}

# –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –∫–ª—é—á—É
QUESTIONS_BY_KEY = {q["key"]: q for q in questions}

class SurveyStates(StatesGroup):
    survey = State()

# --- –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é ---
@router.message(Command("help"))
async def help_command(message: Message):
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "/start ‚Äî üöÄ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å\n"
        "/help ‚Äî ‚ùì –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "/about ‚Äî üçΩÔ∏è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "/cancel ‚Äî ‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å\n"
        "/privacy ‚Äî üîí –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ë–æ—Ç –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –û—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –Ω—É–∂–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞!"
    )
    await message.answer(text)

@router.message(Command("about"))
async def about_command(message: Message):
    text = (
        "üçΩÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≥–æ—Å—Ç–µ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google –¢–∞–±–ª–∏—Ü—É –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
    )
    await message.answer(text)

@router.message(Command("privacy"))
async def privacy_command(message: Message):
    text = (
        "üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n\n"
        "–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
    )
    await message.answer(text)

@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚ùå –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start üöÄ.")

# --- –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞ ---
@router.message(Command("start"))
async def start_survey(message: Message, state: FSMContext):
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π
    await state.clear()
    await state.set_state(SurveyStates.survey)
    await state.update_data(
        current_q=0,
        answers={
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "username": message.from_user.full_name,
            "user_id": message.from_user.id
        },
        waiting_extra=None
    )
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    greeting = QUESTIONS_BY_KEY.get("greeting")
    if greeting:
        await message.answer(greeting["text"])
    await ask_next_question(message, state)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ---
async def ask_next_question(message_or_call, state: FSMContext):
    data = await state.get_data()
    q_index = data.get("current_q", 0)
    waiting_extra = data.get("waiting_extra")
    answers = data.get("answers", {})
    logging.info(f"[ask_next_question] q_index={q_index}, waiting_extra={waiting_extra}, answers={answers}")

    # –ï—Å–ª–∏ –∂–¥—ë–º —É—Ç–æ—á–Ω—è—é—â–∏–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π!
    if waiting_extra:
        extra_q = QUESTIONS_BY_KEY[waiting_extra]
        await message_or_call.answer(f"üí¨ {extra_q['text']}")
        await message_or_call.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –æ—Ç–≤–µ—Ç:")
        return

    # –ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞
    if q_index >= len(BASIC_KEYS):
        await finalize_survey(message_or_call, state)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = f"–í–æ–ø—Ä–æ—Å {q_index+1} –∏–∑ {len(BASIC_KEYS)}"
    q_key = BASIC_KEYS[q_index]
    q = QUESTIONS_BY_KEY[q_key]

    if q["type"] == "buttons":
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è callback_data (key:index)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=opt, callback_data=f"{q_key}:{idx}")]
                for idx, opt in enumerate(q["options"])
            ]
        )
        await message_or_call.answer(f"{progress}\n{q['text']}", reply_markup=kb)
    else:
        await message_or_call.answer(f"{progress}\n{q['text']}")
        await message_or_call.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –æ—Ç–≤–µ—Ç:")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã) ---
@router.callback_query(SurveyStates.survey)
async def process_button(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    q_index = data.get("current_q", 0)
    answers = data.get("answers", {})
    waiting_extra = data.get("waiting_extra")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –∂–¥–∞–ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–π (–Ω–æ –ø—Ä–∏—à–ª–∞ –∫–Ω–æ–ø–∫–∞)
    if waiting_extra:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
    try:
        cb_key, idx = call.data.split(":", 1)
        idx = int(idx)
        q = QUESTIONS_BY_KEY[cb_key]
        value = q["options"][idx]
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.", show_alert=True)
        return

    # –ó–∞—â–∏—Ç–∞: –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
    if q_index >= len(BASIC_KEYS) or BASIC_KEYS[q_index] != cb_key:
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!", show_alert=True)
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
    if cb_key in answers:
        await call.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    answers[cb_key] = value

    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
    if cb_key in SPECIAL_QUESTIONS and value == SPECIAL_QUESTIONS[cb_key]["value"]:
        extra_key = SPECIAL_QUESTIONS[cb_key]["ask_key"]
        if extra_key not in answers:
            await state.update_data(answers=answers, waiting_extra=extra_key)
            extra_q = QUESTIONS_BY_KEY[extra_key]
            await call.answer()
            await call.message.answer(f"üí¨ {extra_q['text']}")
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –æ—Ç–≤–µ—Ç:")
            return

    # –°–ª–µ–¥—É—é—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
    await state.update_data(answers=answers, current_q=q_index+1)
    await call.answer()
    await ask_next_question(call.message, state)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã) ---
@router.message(SurveyStates.survey)
async def process_text(message: Message, state: FSMContext):
    data = await state.get_data()
    q_index = data.get("current_q", 0)
    answers = data.get("answers", {})
    waiting_extra = data.get("waiting_extra")

    # –ï—Å–ª–∏ –∂–¥—ë–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if waiting_extra:
        if waiting_extra in answers:
            await message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
            return
        answers[waiting_extra] = message.text
        # –°–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ +1, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è!
        await state.update_data(answers=answers, waiting_extra=None, current_q=q_index+1)
        await ask_next_question(message, state)
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç ‚Äú–¥—É—Ä–∞–∫–∞‚Äù: —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞–µ–º—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
    if q_index >= len(BASIC_KEYS):
        await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
        return

    q_key = BASIC_KEYS[q_index]
    if q_key in answers:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        return
    answers[q_key] = message.text
    await state.update_data(answers=answers, current_q=q_index+1)
    await ask_next_question(message, state)

# --- –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
async def finalize_survey(message_or_call, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (Google Sheets)
    success = save_user_to_gsheets(answers)
    if success:
        await message_or_call.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è!")
    else:
        await message_or_call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
